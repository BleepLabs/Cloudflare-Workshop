// Using piskel, an online pixel art app, to make animations www.piskelapp.com
// Which it turns out is no longer online but you can still downlod it here https://www.piskelapp.com/download
// Export as C file to get an array from it
// start by selecting your cavans size using the resize button on the right
// no controls 
#include <cloudflare_arduino_workshop.h>

#define pot1_pin A0
#define pot2_pin A1

unsigned long current_time;
unsigned long prev_time[8]; //array of 8 variables named "prev"

float set_hue;
int xy_sel;
int xy_count;
int x_pot;
int y_pot;
int rate1 = 30;
int animation_step;


//in piskel go to export on the right side menu
// select other and "donwload C file"
// in that file copy the array here and change the values between the "[]" as shown
// then jsut cahnge your frame rate asn size to match

#define bitmap_width 8
#define bitmap_height 8
#define total_frames 7

static const uint32_t piskel_output[total_frames][bitmap_width * bitmap_height] = { //uint32_t is the same as unsigned long
  {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0x00000000
  },
  {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0xffff8300, 0xffff8300, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0x00000000
  },
  {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0xffff8300, 0xffff8300, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0x00000000
  },
  {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xffff00b8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffff00b8, 0x00000000,
    0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000,
    0x00000000, 0xffff00b8, 0x00000000, 0xffff8300, 0xffff8300, 0x00000000, 0xffff00b8, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0x00000000
  },
  {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0xff7c00ff, 0x00000000, 0xff7c00ff, 0x00000000, 0x00000000, 0xff7c00ff, 0x00000000, 0xff7c00ff,
    0x00000000, 0xffff00b8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffff00b8, 0x00000000,
    0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000,
    0x00000000, 0xffff00b8, 0x00000000, 0xffff8300, 0xffff8300, 0x00000000, 0xffff00b8, 0x00000000,
    0xff7c00ff, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0xff7c00ff
  },
  {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0xff009dff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff009dff,
    0x00000000, 0xff009dff, 0x00000000, 0xff009dff, 0xff009dff, 0x00000000, 0xff009dff, 0x00000000,
    0xff7c00ff, 0x00000000, 0xff7c00ff, 0x00000000, 0x00000000, 0xff7c00ff, 0x00000000, 0xff7c00ff,
    0x00000000, 0xffff00b8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffff00b8, 0x00000000,
    0xff009dff, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0xff009dff,
    0x00000000, 0xffff00b8, 0x00000000, 0xffff8300, 0xffff8300, 0x00000000, 0xffff00b8, 0x00000000,
    0xff7c00ff, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0xff7c00ff
  },
  {
    0x00000000, 0xff66fdf4, 0x00000000, 0xff66fdf4, 0xff66fdf4, 0x00000000, 0xff66fdf4, 0x00000000,
    0xff009dff, 0x00000000, 0xff66fdf4, 0x00000000, 0x00000000, 0xff66fdf4, 0x00000000, 0xff009dff,
    0x00000000, 0xff009dff, 0x00000000, 0xff009dff, 0xff009dff, 0x00000000, 0xff009dff, 0x00000000,
    0xff7c00ff, 0x00000000, 0xff7c00ff, 0x00000000, 0x00000000, 0xff7c00ff, 0x00000000, 0xff7c00ff,
    0x00000000, 0xffff00b8, 0x00000000, 0xff66fdf4, 0xff66fdf4, 0x00000000, 0xffff00b8, 0x00000000,
    0xff009dff, 0x00000000, 0xffffdd00, 0x00000000, 0x00000000, 0xffffdd00, 0x00000000, 0xff009dff,
    0x00000000, 0xffff00b8, 0x00000000, 0xffff8300, 0xffff8300, 0x00000000, 0xffff00b8, 0x00000000,
    0xff7c00ff, 0x00000000, 0x00000000, 0xff00ff53, 0xff00ff53, 0x00000000, 0x00000000, 0xff7c00ff
  }
};



void setup() {
  ledGrid.begin(); //must be done in setup for the LEDs to work.

  analogReadResolution(12); //0-4095 pot values
  analogReadAveraging(64);  //smooth the readings some
}

//function to interpret the 32 bit output of PISKEL to RGB
void set_PISKEL(int pixel, uint32_t c32) {
  //data is stored as 8bits of Alpha (transparency which is ignored) then 8bits blue, 8bits green, 8bits red
  byte RedLight = (c32); //jsut the bottom 8 bits the rest gets chopped of fsince its a byte
  byte GreenLight = (c32 >> 8); //bit shift by 8 so now only the green is in the 8 bits of the byte
  byte BlueLight = (c32 >> 16);
  ledGrid.setPixelColor(pixel, RedLight * max_brightness, GreenLight * max_brightness, BlueLight * max_brightness);
}

void loop() {
  current_time = millis();

  if (current_time - prev_time[1] > 500) {
    prev_time[1] = current_time;
    animation_step = animation_step + 1;
    if (animation_step > total_frames - 1) {
      animation_step = 0;
    }
  }


  if (current_time - prev_time[0] > rate1) {
    prev_time[0] = current_time;

    for ( int x_count = 0; x_count < 8; x_count++) {
      for ( int y_count = 0; y_count < 8; y_count++) {
        xy_count = x_count + (y_count * 8); //goes from 0-64
        set_pixel_HSV(xy_count, 0, 0, 0); // turn everything off. otherwise the last "frame" swill still show

        ////needs to be uint32_t aka unsigned long as thats what piskel exports
        uint32_t current_bitmap_pixel = piskel_output[animation_step][xy_count];

        //set_PISKEL(led number ,piskel color in uint32_t)
        //use this isntead of set_pixel_HSV
        set_PISKEL(xy_count, current_bitmap_pixel);

        //you can still to set_pixel_HSV in thes same code though
        if (y_count == 7) {
          if (x_count > 2 && x_count < 5 ) {
            float c1 = random(100) / 100.0;
            set_pixel_HSV(xy_count, c1, 1, .33);
          }
        }
      }
    }

    ledGrid.show(); // after we've set what we want all the LEDs to be we send the data out through this function
  } //timing "if" over

}// loop is over
